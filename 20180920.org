+ 当利用类的已有对象来初始化另一个新对象时，系统较自动调用复制构造函数。
+ 如果函数的形参的类对象，则在进行函数调用时(将实参传递给形参时)，将自动调用复制构造函数。
  如果复制构造函数的参数不是对象引用而是对象本身，将出现运行错误。由于兑现传递给复制构造函数时，还需要调用复制构造函数。产生无限循环调用。
+ 如果函数的形参是类对象的指针或对象引用，则在函数调用时并不调用复制构造函数。
+ 如果函数的返回值时类对象，1则在执行返回语句时将自动调用复制构造函数（返回类指针和引用时不调用复制构造函数)
** 6.6 变换构造函数和变换函数
*** 6.6.1 变换构造函数
只有一个参数的构造函数。
由于变换构造函数在初始化方面的间接性，使其在实际程序设计中经常被用到。
*** 6.6.2 变换函数
变换函数用于将对象中的一个值返回出来。
operator --> 变换函数定义，运算符重载
operator 变换的类型 (){return 返回值;}
+ 变换函数本身也可以定义变量并包含多个语句，也可以对数据成员进行更改。但是变换函数中必须包含return语句，同时需要注意其访问权限，变换函数不能有参数。
+ 同一个类型的变换函数只能有一个
** 6.7 静态数据成员和静态数据函数
+ 在C++中，没定义一个对象就为该对象分配了独立的存储空间，对象不同其存储空间是不同的。
+ 对于某些类来讲，往往有一些特定的数据成员的值是固定不变的，或者说对该类的所有对象都是一样的，他们不是与某一个对象有关，而是与该类的所有对象有关，这种数据成员就可以被定义为静态的。
+ 泪中的成员函数也可以被定义为静态的，当某个成员函数被定义为静态时，该成员函数就不再与某个具体的对象相联系，他是属于类的。
*** 定义方法
*static*
+ 静态数据成员和景泰成员函数并不是生成一个对象就拷贝，所有对象都用一个。
+ 主要用于设定所有对象都共享的数据
+ 设置静态成员函数是为了提高内存的利用效率，所有对象共享一份代码。
+ 静态成员函数不能对一般的数据成员记性操作，通常只用于对静态数据成员进行处理
** 6.8 this 指针
+ 指向当前对象的指针

** 6.9 友元
+ 每次访问private数据是都需要通过成员函数进行，需要额外的调用开销
+ 友元：能够对private数据成员进行访问的函数或类
*** 6.9.1 友元函数
在类中函数说明的前面添加上friend关键字，就可以将该函数说明为友元函数。
友元函数不是当前类的成员函数。可以理解为全局函数。
+ 友元函数的说明可以出现在类中的私有，受保护或公共部分，作用是一样的。
+ 任何一个不是类的成员函数的函数都可以成为该类的友元函数。
*** 6.9.2 友元类
当以给类作为另一个类的友元时，该类中的所有成员函数都可以对另一个类中的数据成员和成员函数进行访问。
注: 一个类中的陈元函数也可以被声明为另一个类的友元函数

只有当某个类中的所有成员函数的定义都完整给出之后(而不是只给出其声明)，才能定义该类的对象。

** 6.10 运算符的重载
*** 6.10.1 operator函数的功能
对语言中已有的运算符进行重新定义，赋予其另一种功能。运算符的重载一般是在给定的累中实现的没这样就可以在该类中使用一重载的运算符来进行相应的操作。


