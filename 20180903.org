两大难题
* 如何越过程序设计的复杂性障碍
* 如何利用软件来自然地表示客观世界(对象模型问题)

面向对象的程序设计技术很好的解决了上述问题，而C++语言正是面向对象程序设计技术的具体实现。

将函数放在结构体里面，就可以将这个结构体称为对象。

C C++ 高度兼容性

* 1.1 面向对象程序设计的特点
** 1. 模块化(抽象)
每一个对象都是一个完整的功能模块。
** 2. 数据隐藏(封装)
数据隐藏的目的是将对象的设计和对象的使用分开，使用者不必了解对象实现的细节，只要利用设计者所提供的接口来访问该对象即可。
同时，由于未对象中的成员加上了访问权限控制信息，使得外部对对象中成员的访问时有限制的，从而起到了数据隐藏的作用。
可以保证数据是一个有意义的状态。
** 3. 继承
所谓继承就算是利用已有的类来生成新的类的过程。显然，继承操作能够减轻程序设计工作量，提高程序的可靠性。
** 4. 多态性
所谓多态，是指一个名字可具有多种不同的语义。面向对象程序设计中的多态性，给程序设计带来了很大的灵活性，
** 5. 重载(重新定义)
在C++语言中，多个函数可以共用一个名字，只要他们的参数个数不同或者参数类型不同即可--> 重载。
在C++语言中，不但函数可重载，运算符也可以重载。增加了重载功能以后，将提高程序的可理解性，是程序功能实现起来更自然，更流畅。
例 :  x + y 可以定义成 结构体变量相加。

* 1.2
cpp -> obj -> exe
* 1.3 

#+BEGIN_SRC C++

#include <iostream.h>
void main(){
   cout<< "Hello, World!\n";
}
 ”<< --> 插入运算符“
#+END_SRC 

#+BEGIN_SRC C++

#include <iostream.h>
void main(){
   cout<< "Hello, World!\n";
}
 ”<< --> 插入运算符“
#+END_SRC

#+BEGIN_SRC C++

#include <iostream.h>
int SUBab(int a, int b){

int c;
c = a - b;
return c;
}
#+END_SRC
